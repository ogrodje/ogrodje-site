---
import type {Event} from '../services/goo/Events.ts';
import {formatEventTime} from '../utils/DateTimeUtils';
import {strToColor} from '../utils/Colors';
// import {getImage} from 'astro:assets';
import {Image} from '@unpic/astro';

export interface Props {
  day: string;
  event: Event;
}

const {event} = Astro.props;

function when(event: Event): string {
  return formatEventTime({
    startDateTime: event.localStartDateTime,
    endDateTime: event.localEndDateTime,
    hasStartTime: event.hasStartTime,
    hasEndTime: event.hasEndTime,
  });
}

const meetupNameAlt = (e: Event) => {
  return e.meetupName || 'Meetup';
};


/*
async function backgroundImage(e: Event, width: number, height: number): Promise<any> {
  if (e.meetup?.logoImage) {
    const image = await getImage({src: e.meetup?.logoImage, width: width, height: height, inferSize: true});
    return ({
      backgroundImage: `url('${image.src}')`,
      backgroundPosition: 'left center',
      'background-repeat': 'no-repeat',
      'background-size': '30px'
    })
  } else return ({})
}
*/

const meetupNameStyles = (e: Event) => {
  if (e?.meetup?.backgroundColor && e?.meetup?.mainColor) {
    return {
      color: e.meetup?.mainColor,
      'background-color': e.meetup?.backgroundColor,
    };
  } else {
    return {
      'background-color': strToColor(meetupNameAlt(e), {}),
    };
  }
};

async function meetupStyles(e: Event) {
  const baseStyles = meetupNameStyles(e)
  const backgroundImageStyles = {};
  return ({...baseStyles, ...backgroundImageStyles});
}

const meetupNameClasses = (e: Event): string => [
    'meetup-name', e.meetup?.logoImage ? 'has_logo' : undefined
  ]
    .filter((v) => v !== undefined)
    .join(' ')
;

const eventClasses = (e: Event): string => [
    'event', e.promotedAt ? 'is_promoted' : undefined
  ]
    .filter((v) => v !== undefined)
    .join(' ')
;
---
<div class={eventClasses(event)}>
  <div class="event-title">
    <a href={event.eventURL} target="_blank">{event.title}</a>
  </div>
  <div class="event-meta">
    <div class="when">{when(event)}</div>

    <div
      class={meetupNameClasses(event)}
      style={await meetupStyles(event)}
    >
      {
        event.meetup?.logoImage &&
        <Image src={event.meetup.logoImage} alt={meetupNameAlt(event)} width={30} height={30}/>
      }
      <span class="name">{event.meetupName}</span>
    </div>

    {
      event.locationName && event.locationAddress && (
        <div class="location-meta">
          {event.locationName && (
            <div class="location-name">{event.locationName}</div>
          )}
          {event.locationAddress && (
            <div class="location-address">{event.locationAddress}</div>
          )}
        </div>
      )
    }
  </div>
</div>
<style lang="scss">
  @use 'sass:color';
  @use '../variables';

  @mixin super-line {
    line-height: variables.$main-line-height * 1.2;
  }

  html {
    &.light {
      .event {
        &.is_promoted {
          background-color: #f2f2f2;
        }
      }
    }
  }

  .event {
    display: block;
    clear: both;
    margin-bottom: 20px;

    &.is_promoted {
      background-color: #2c2c2c;
      padding: 20px;
      border-radius: 10px;
    }

    .event-title {
      font-family: variables.$special-font;
      font-size: variables.$main-font-size * 1.3;
      line-height: variables.$main-font-size * 2;

      @media only screen and (max-width: 1000px) {
        font-size: variables.$main-font-size * 1.1;
        line-height: variables.$main-font-size * 2.1;
      }

      a {
        color: var(--color_default);
        text-decoration: none;
      }
    }

    .event-meta {
      display: block;
      clear: both;

      .when, .meetup-name, .location-meta {
        margin-bottom: 3px;
      }

      .meetup-name {
        height: 100%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        vertical-align: middle;
        position: relative;
        overflow: hidden;
        padding: 5px;
        
        img {
          display: block;
          max-width: 100%;
          max-height: 100%;
          margin-right: 5px;
        }

      }

      .location-meta {
        display: inline-block;

        .location-name,
        .location-address {
          display: inline-block;
          margin-right: 10px;
        }
      }
    }
  }
</style>
