---
import Layout from "../../layouts/Layout.astro";
import Person from "../../components/Person.astro";
import {groupedPersonEpisodes, personPath} from "../../model/Person";
import {ALL_ROLES, localiseRole} from "../../model/Role";
import EpisodeRow from "../../components/EpisodeRow.astro";

export async function getStaticPaths() {
    const hygraph_endpoint = await import.meta.env.HYGRAPH_ENDPOINT;
    const response = await fetch(
        hygraph_endpoint,
        {
            method: "POST",
            headers: {"Content-Type": "application/json", Accept: "application/json"},
            body: JSON.stringify({
                query: `
                query AllPeople($size: Int) {
                  people(first: $size, where: {}) {
                    id
                    nickname
                    fullName
                    bio
                    avatar {
                      id
                      url
                    }
                    socialFacebook
                    socialHomepage
                    socialInstagram
                    socialLinkedIn
                    socialTwitter
                    ${ALL_ROLES.map(role => (
                    `${role}(first: 500, orderBy: airedAt_DESC) {
                        entryId: id
                        ... EpisodeF
                        }`
                )).join("\n")}
                  }
                }
                fragment EpisodeF on Episode {
                  name
                  code
                  airedAt
                  show { name color }
                }        
        `, variables: {size: 300}
            }),
        }
    );

    const data = await response.json();
    return (data.data?.people || []).map((person) => ({
        params: {person_id: personPath(person)},
        props: {person}
    }))
}

const {person} = Astro.props;
---
<Layout title={person.fullName}>
    <Person person={person} showSocial=true></Person>

    <h2>Epizode</h2>

    <div class="episodes-by-role">
        {Array.from(groupedPersonEpisodes(person)).map(([role, episodes]) => {
            return (
                    <div class="role-wrap">
                        <h3 class="role">{localiseRole(role)}</h3>
                        <div class="episodes">
                            {episodes.map(episode => (
                                    <EpisodeRow episode={episode}/>
                            ))}
                        </div>
                    </div>)
        })}
    </div>
</Layout>
