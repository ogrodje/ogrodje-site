---
import Layout from "../../layouts/Layout.astro";
import {type Episode, episodePath, optimiseEpisodeTitle} from "../../model/Episode";
import {marked} from 'marked';
import Person from "../../components/Person.astro";
import EpizodeTools from "../../components/EpizodeTools.astro";

interface Props {
  episode: Episode;
}

export async function getStaticPaths() {
  const hygraph_endpoint = import.meta.env.HYGRAPH_ENDPOINT;
  const response = await fetch(
    hygraph_endpoint,
    {
      method: "POST",
      headers: {"Content-Type": "application/json", Accept: "application/json"},
      body: JSON.stringify({
        query: `
query AllEpisodes($size: Int, $stage: Stage!) {
  episodes(first: $size, orderBy: airedAt_DESC, stage: $stage) {
    topics {
      name
    }
    show {
      id
      name
      color
    }
    summary
    machineSummary
    name
    code
    airedAt
    host { ...PersonF }
    cohosts { ...PersonF }
    guests { ... PersonF }
    multimediaProducers { ...PersonF }
    consultants { ...PersonF }
    designers { ...PersonF }
    anchorUrl
    applePodcastsUrl
    castboxUrl
    youTubeUrl
    spotifyUrl
    patreonUrl
  }
}
fragment PersonF on Person {
    fullName
    avatar { url(transformation: { image: { resize: { fit: crop, height: 200, width: 200 } } }) }
            }
        `, variables: {size: 300, stage: 'PUBLISHED'}
      }),
    }
  );

  const data = await response.json();
  const {episodes} = data.data;
  return episodes.map((episode: Episode) => ({
    params: {
      code: episodePath(episode)
    },
    props: {
      episode: {
        ...episode, ...{
          name: optimiseEpisodeTitle(episode)
        }
      }
    }
  }))
}

const renderSummary = (episode: Episode, field: keyof Episode = 'summary'): string =>
  marked.parse(
    episode[field] as string, {
      async: false,
    }
  ) as string;


const {episode} = Astro.props;
const pageTitle: string = `Ogrodje - ${episode.name} (${episode.code})`
---
<Layout title={pageTitle} hideFooter="">
  <div class="episode single">
    <h1>
      <span class="code">{episode.code}</span>
      {episode.show && (
        <div class="show" data-show={episode.show.name}>{episode.show.name}</div>)
      }
      <span class="name">{episode.name}</span>
    </h1>

    <div class="people">
      {episode.guests.map(guest =>
        <Person person={guest}/>)}
      <Person person={episode.host}/>
      {episode.cohosts.map(guest => (
        <Person person={guest}/>))}
    </div>

    <EpizodeTools episode={episode} showLabels={true} showChannelLabels={true}/>

    <div class="summary" set:html={renderSummary(episode, 'summary')}></div>

    {episode.machineSummary ? (
      <h2>Strojni povzetek epizode ✨*</h2>
      <div class="machineSummary" set:html={renderSummary(episode, 'machineSummary')}></div>
      <p class="warning">⚠️ Strojni povzetek je napisan s pomočjo umetne inteligence in lahko vsebuje nepravilnosti.
        ⚠️</p>
    ) : null}

    <div class="meta">
      Izid:
      <div class="m aired-at">{episode.airedAt}</div>
    </div>
  </div>
</Layout>
<style lang="scss" is:global>
  @use "../../_variables";
  @use "../../episode_row";

  .episode.single {
    line-height: 1.5;

    .show {
      mix-blend-mode: difference !important;
    }
  }

  .people {
    .person {
      position: relative;
      display: inline-block;
      margin-right: 30px;

      &:last-child {
        margin-right: 0;
      }
    }
  }

  .meta {
    color: #333;

    .m {
      display: inline;
      padding-right: 10px;
    }
  }

  .code {
    font-weight: 100;
  }

  p.warning {
    background-color: #535353;
    padding: 4px;
    text-align: center;
    color: black;
    font-size: smaller;
  }
</style>
